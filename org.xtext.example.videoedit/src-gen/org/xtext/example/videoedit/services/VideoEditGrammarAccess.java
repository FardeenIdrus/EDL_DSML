/*
 * generated by Xtext 2.33.0
 */
package org.xtext.example.videoedit.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class VideoEditGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.videoedit.VideoEdit.Project");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTracksAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTracksTrackParserRuleCall_3_0 = (RuleCall)cTracksAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Project:
		//// Project name starts with "project" then the name of the project
		//'project' name=STRING '{'
		//    //A project contains multiple track
		//    tracks+=Track*
		//'}';
		@Override public ParserRule getRule() { return rule; }
		
		//// Project name starts with "project" then the name of the project
		//'project' name=STRING '{'
		//    //A project contains multiple track
		//    tracks+=Track*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//// Project name starts with "project" then the name of the project
		//'project'
		public Keyword getProjectKeyword_0() { return cProjectKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		////A project contains multiple track
		//tracks+=Track*
		public Assignment getTracksAssignment_3() { return cTracksAssignment_3; }
		
		//Track
		public RuleCall getTracksTrackParserRuleCall_3_0() { return cTracksTrackParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class TrackElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.videoedit.VideoEdit.Track");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTrackKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTrackTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cClipsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cClipsClipParserRuleCall_4_0 = (RuleCall)cClipsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// A track is a video or audio track
		//Track:
		//    'track' type=TrackType name=ID '{'
		//    // Each track can contain multiple clips
		//    clips+=Clip*
		//'}';
		@Override public ParserRule getRule() { return rule; }
		
		//    'track' type=TrackType name=ID '{'
		//    // Each track can contain multiple clips
		//    clips+=Clip*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'track'
		public Keyword getTrackKeyword_0() { return cTrackKeyword_0; }
		
		//type=TrackType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//TrackType
		public RuleCall getTypeTrackTypeEnumRuleCall_1_0() { return cTypeTrackTypeEnumRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//// Each track can contain multiple clips
		//clips+=Clip*
		public Assignment getClipsAssignment_4() { return cClipsAssignment_4; }
		
		//Clip
		public RuleCall getClipsClipParserRuleCall_4_0() { return cClipsClipParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ClipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.videoedit.VideoEdit.Clip");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClipKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSourceKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSourceAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSourceSTRINGTerminalRuleCall_4_0 = (RuleCall)cSourceAssignment_4.eContents().get(0);
		private final Keyword cSource_inKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSourceInAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSourceInTimeCodeParserRuleCall_6_0 = (RuleCall)cSourceInAssignment_6.eContents().get(0);
		private final Keyword cSource_outKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cSourceOutAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cSourceOutTimeCodeParserRuleCall_8_0 = (RuleCall)cSourceOutAssignment_8.eContents().get(0);
		private final Keyword cTarget_positionKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cTargetPositionAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cTargetPositionTimeCodeParserRuleCall_10_0 = (RuleCall)cTargetPositionAssignment_10.eContents().get(0);
		private final Assignment cAudioLevelAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cAudioLevelAudioLevelParserRuleCall_11_0 = (RuleCall)cAudioLevelAssignment_11.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cSync_withKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Assignment cSyncWithAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final CrossReference cSyncWithClipCrossReference_12_1_0 = (CrossReference)cSyncWithAssignment_12_1.eContents().get(0);
		private final RuleCall cSyncWithClipSTRINGTerminalRuleCall_12_1_0_1 = (RuleCall)cSyncWithClipCrossReference_12_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//Clip:
		//    'clip' name=STRING '{' // Each clip has a name in quotes
		//    'source:' source=STRING // The source file path
		//    'source_in:' sourceIn=TimeCode //Starting timecode in the source file
		//    'source_out:' sourceOut=TimeCode // Ending timecode in the source file
		//    'target_position:' targetPosition=TimeCode //where to place the clip in the timeline
		//    (audioLevel=AudioLevel)? //Optional setting for audio level
		//     ('sync_with:' syncWith=[Clip|STRING])? // Optional reference to another clip
		//'}';
		@Override public ParserRule getRule() { return rule; }
		
		//    'clip' name=STRING '{' // Each clip has a name in quotes
		//    'source:' source=STRING // The source file path
		//    'source_in:' sourceIn=TimeCode //Starting timecode in the source file
		//    'source_out:' sourceOut=TimeCode // Ending timecode in the source file
		//    'target_position:' targetPosition=TimeCode //where to place the clip in the timeline
		//    (audioLevel=AudioLevel)? //Optional setting for audio level
		//     ('sync_with:' syncWith=[Clip|STRING])? // Optional reference to another clip
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'clip'
		public Keyword getClipKeyword_0() { return cClipKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//// Each clip has a name in quotes
		//   'source:'
		public Keyword getSourceKeyword_3() { return cSourceKeyword_3; }
		
		//source=STRING
		public Assignment getSourceAssignment_4() { return cSourceAssignment_4; }
		
		//STRING
		public RuleCall getSourceSTRINGTerminalRuleCall_4_0() { return cSourceSTRINGTerminalRuleCall_4_0; }
		
		//// The source file path
		//   'source_in:'
		public Keyword getSource_inKeyword_5() { return cSource_inKeyword_5; }
		
		//sourceIn=TimeCode
		public Assignment getSourceInAssignment_6() { return cSourceInAssignment_6; }
		
		//TimeCode
		public RuleCall getSourceInTimeCodeParserRuleCall_6_0() { return cSourceInTimeCodeParserRuleCall_6_0; }
		
		////Starting timecode in the source file
		//   'source_out:'
		public Keyword getSource_outKeyword_7() { return cSource_outKeyword_7; }
		
		//sourceOut=TimeCode
		public Assignment getSourceOutAssignment_8() { return cSourceOutAssignment_8; }
		
		//TimeCode
		public RuleCall getSourceOutTimeCodeParserRuleCall_8_0() { return cSourceOutTimeCodeParserRuleCall_8_0; }
		
		//// Ending timecode in the source file
		//   'target_position:'
		public Keyword getTarget_positionKeyword_9() { return cTarget_positionKeyword_9; }
		
		//targetPosition=TimeCode
		public Assignment getTargetPositionAssignment_10() { return cTargetPositionAssignment_10; }
		
		//TimeCode
		public RuleCall getTargetPositionTimeCodeParserRuleCall_10_0() { return cTargetPositionTimeCodeParserRuleCall_10_0; }
		
		////where to place the clip in the timeline
		//   (audioLevel=AudioLevel)?
		public Assignment getAudioLevelAssignment_11() { return cAudioLevelAssignment_11; }
		
		//AudioLevel
		public RuleCall getAudioLevelAudioLevelParserRuleCall_11_0() { return cAudioLevelAudioLevelParserRuleCall_11_0; }
		
		////Optional setting for audio level
		//    ('sync_with:' syncWith=[Clip|STRING])?
		public Group getGroup_12() { return cGroup_12; }
		
		//'sync_with:'
		public Keyword getSync_withKeyword_12_0() { return cSync_withKeyword_12_0; }
		
		//syncWith=[Clip|STRING]
		public Assignment getSyncWithAssignment_12_1() { return cSyncWithAssignment_12_1; }
		
		//[Clip|STRING]
		public CrossReference getSyncWithClipCrossReference_12_1_0() { return cSyncWithClipCrossReference_12_1_0; }
		
		//STRING
		public RuleCall getSyncWithClipSTRINGTerminalRuleCall_12_1_0_1() { return cSyncWithClipSTRINGTerminalRuleCall_12_1_0_1; }
		
		// // Optional reference to another clip
		//'}'
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
	}
	public class AudioLevelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.videoedit.VideoEdit.AudioLevel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAudio_levelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLevelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLevelINTTerminalRuleCall_1_0 = (RuleCall)cLevelAssignment_1.eContents().get(0);
		private final Keyword cPercentSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//AudioLevel:
		//    'audio_level:' level=INT '%';
		@Override public ParserRule getRule() { return rule; }
		
		//'audio_level:' level=INT '%'
		public Group getGroup() { return cGroup; }
		
		//'audio_level:'
		public Keyword getAudio_levelKeyword_0() { return cAudio_levelKeyword_0; }
		
		//level=INT
		public Assignment getLevelAssignment_1() { return cLevelAssignment_1; }
		
		//INT
		public RuleCall getLevelINTTerminalRuleCall_1_0() { return cLevelINTTerminalRuleCall_1_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_2() { return cPercentSignKeyword_2; }
	}
	public class TimeCodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.videoedit.VideoEdit.TimeCode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHoursAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHoursINTTerminalRuleCall_0_0 = (RuleCall)cHoursAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMinutesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMinutesINTTerminalRuleCall_2_0 = (RuleCall)cMinutesAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSecondsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSecondsINTTerminalRuleCall_4_0 = (RuleCall)cSecondsAssignment_4.eContents().get(0);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cFramesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFramesINTTerminalRuleCall_6_0 = (RuleCall)cFramesAssignment_6.eContents().get(0);
		
		// // Percentage value for volume
		//TimeCode:
		//    hours=INT ':' minutes=INT ':' seconds=INT ':' frames=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//hours=INT ':' minutes=INT ':' seconds=INT ':' frames=INT
		public Group getGroup() { return cGroup; }
		
		//hours=INT
		public Assignment getHoursAssignment_0() { return cHoursAssignment_0; }
		
		//INT
		public RuleCall getHoursINTTerminalRuleCall_0_0() { return cHoursINTTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//minutes=INT
		public Assignment getMinutesAssignment_2() { return cMinutesAssignment_2; }
		
		//INT
		public RuleCall getMinutesINTTerminalRuleCall_2_0() { return cMinutesINTTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//seconds=INT
		public Assignment getSecondsAssignment_4() { return cSecondsAssignment_4; }
		
		//INT
		public RuleCall getSecondsINTTerminalRuleCall_4_0() { return cSecondsINTTerminalRuleCall_4_0; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//frames=INT
		public Assignment getFramesAssignment_6() { return cFramesAssignment_6; }
		
		//INT
		public RuleCall getFramesINTTerminalRuleCall_6_0() { return cFramesINTTerminalRuleCall_6_0; }
	}
	
	public class TrackTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.videoedit.VideoEdit.TrackType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cV1EnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cV1V1Keyword_0_0 = (Keyword)cV1EnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cV2EnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cV2V2Keyword_1_0 = (Keyword)cV2EnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cV3EnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cV3V3Keyword_2_0 = (Keyword)cV3EnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cA1EnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cA1A1Keyword_3_0 = (Keyword)cA1EnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cA2EnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cA2A2Keyword_4_0 = (Keyword)cA2EnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cA3EnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cA3A3Keyword_5_0 = (Keyword)cA3EnumLiteralDeclaration_5.eContents().get(0);
		
		//// different types of track - audio (A1, A2, A3), video - (V1, V2, V3)
		//enum TrackType:
		//    V1='V1' | V2='V2' | V3='V3' |
		//    A1='A1' | A2='A2' | A3='A3';
		public EnumRule getRule() { return rule; }
		
		//V1='V1' | V2='V2' | V3='V3' |
		//A1='A1' | A2='A2' | A3='A3'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//V1='V1'
		public EnumLiteralDeclaration getV1EnumLiteralDeclaration_0() { return cV1EnumLiteralDeclaration_0; }
		
		//'V1'
		public Keyword getV1V1Keyword_0_0() { return cV1V1Keyword_0_0; }
		
		//V2='V2'
		public EnumLiteralDeclaration getV2EnumLiteralDeclaration_1() { return cV2EnumLiteralDeclaration_1; }
		
		//'V2'
		public Keyword getV2V2Keyword_1_0() { return cV2V2Keyword_1_0; }
		
		//V3='V3'
		public EnumLiteralDeclaration getV3EnumLiteralDeclaration_2() { return cV3EnumLiteralDeclaration_2; }
		
		//'V3'
		public Keyword getV3V3Keyword_2_0() { return cV3V3Keyword_2_0; }
		
		//A1='A1'
		public EnumLiteralDeclaration getA1EnumLiteralDeclaration_3() { return cA1EnumLiteralDeclaration_3; }
		
		//'A1'
		public Keyword getA1A1Keyword_3_0() { return cA1A1Keyword_3_0; }
		
		//A2='A2'
		public EnumLiteralDeclaration getA2EnumLiteralDeclaration_4() { return cA2EnumLiteralDeclaration_4; }
		
		//'A2'
		public Keyword getA2A2Keyword_4_0() { return cA2A2Keyword_4_0; }
		
		//A3='A3'
		public EnumLiteralDeclaration getA3EnumLiteralDeclaration_5() { return cA3EnumLiteralDeclaration_5; }
		
		//'A3'
		public Keyword getA3A3Keyword_5_0() { return cA3A3Keyword_5_0; }
	}
	
	private final ProjectElements pProject;
	private final TrackElements pTrack;
	private final TrackTypeElements eTrackType;
	private final ClipElements pClip;
	private final AudioLevelElements pAudioLevel;
	private final TimeCodeElements pTimeCode;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public VideoEditGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProject = new ProjectElements();
		this.pTrack = new TrackElements();
		this.eTrackType = new TrackTypeElements();
		this.pClip = new ClipElements();
		this.pAudioLevel = new AudioLevelElements();
		this.pTimeCode = new TimeCodeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.videoedit.VideoEdit".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Project:
	//// Project name starts with "project" then the name of the project
	//'project' name=STRING '{'
	//    //A project contains multiple track
	//    tracks+=Track*
	//'}';
	public ProjectElements getProjectAccess() {
		return pProject;
	}
	
	public ParserRule getProjectRule() {
		return getProjectAccess().getRule();
	}
	
	//// A track is a video or audio track
	//Track:
	//    'track' type=TrackType name=ID '{'
	//    // Each track can contain multiple clips
	//    clips+=Clip*
	//'}';
	public TrackElements getTrackAccess() {
		return pTrack;
	}
	
	public ParserRule getTrackRule() {
		return getTrackAccess().getRule();
	}
	
	//// different types of track - audio (A1, A2, A3), video - (V1, V2, V3)
	//enum TrackType:
	//    V1='V1' | V2='V2' | V3='V3' |
	//    A1='A1' | A2='A2' | A3='A3';
	public TrackTypeElements getTrackTypeAccess() {
		return eTrackType;
	}
	
	public EnumRule getTrackTypeRule() {
		return getTrackTypeAccess().getRule();
	}
	
	//Clip:
	//    'clip' name=STRING '{' // Each clip has a name in quotes
	//    'source:' source=STRING // The source file path
	//    'source_in:' sourceIn=TimeCode //Starting timecode in the source file
	//    'source_out:' sourceOut=TimeCode // Ending timecode in the source file
	//    'target_position:' targetPosition=TimeCode //where to place the clip in the timeline
	//    (audioLevel=AudioLevel)? //Optional setting for audio level
	//     ('sync_with:' syncWith=[Clip|STRING])? // Optional reference to another clip
	//'}';
	public ClipElements getClipAccess() {
		return pClip;
	}
	
	public ParserRule getClipRule() {
		return getClipAccess().getRule();
	}
	
	//AudioLevel:
	//    'audio_level:' level=INT '%';
	public AudioLevelElements getAudioLevelAccess() {
		return pAudioLevel;
	}
	
	public ParserRule getAudioLevelRule() {
		return getAudioLevelAccess().getRule();
	}
	
	// // Percentage value for volume
	//TimeCode:
	//    hours=INT ':' minutes=INT ':' seconds=INT ':' frames=INT;
	public TimeCodeElements getTimeCodeAccess() {
		return pTimeCode;
	}
	
	public ParserRule getTimeCodeRule() {
		return getTimeCodeAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
