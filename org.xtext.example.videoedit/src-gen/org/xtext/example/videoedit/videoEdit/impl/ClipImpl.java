/**
 * generated by Xtext 2.33.0
 */
package org.xtext.example.videoedit.videoEdit.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.videoedit.videoEdit.AudioLevel;
import org.xtext.example.videoedit.videoEdit.Clip;
import org.xtext.example.videoedit.videoEdit.TimeCode;
import org.xtext.example.videoedit.videoEdit.VideoEditPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Clip</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.videoedit.videoEdit.impl.ClipImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.example.videoedit.videoEdit.impl.ClipImpl#getSource <em>Source</em>}</li>
 *   <li>{@link org.xtext.example.videoedit.videoEdit.impl.ClipImpl#getSourceIn <em>Source In</em>}</li>
 *   <li>{@link org.xtext.example.videoedit.videoEdit.impl.ClipImpl#getSourceOut <em>Source Out</em>}</li>
 *   <li>{@link org.xtext.example.videoedit.videoEdit.impl.ClipImpl#getTargetPosition <em>Target Position</em>}</li>
 *   <li>{@link org.xtext.example.videoedit.videoEdit.impl.ClipImpl#getAudioLevel <em>Audio Level</em>}</li>
 *   <li>{@link org.xtext.example.videoedit.videoEdit.impl.ClipImpl#getSyncWith <em>Sync With</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ClipImpl extends MinimalEObjectImpl.Container implements Clip
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getSource() <em>Source</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSource()
   * @generated
   * @ordered
   */
  protected static final String SOURCE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSource() <em>Source</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSource()
   * @generated
   * @ordered
   */
  protected String source = SOURCE_EDEFAULT;

  /**
   * The cached value of the '{@link #getSourceIn() <em>Source In</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSourceIn()
   * @generated
   * @ordered
   */
  protected TimeCode sourceIn;

  /**
   * The cached value of the '{@link #getSourceOut() <em>Source Out</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSourceOut()
   * @generated
   * @ordered
   */
  protected TimeCode sourceOut;

  /**
   * The cached value of the '{@link #getTargetPosition() <em>Target Position</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTargetPosition()
   * @generated
   * @ordered
   */
  protected TimeCode targetPosition;

  /**
   * The cached value of the '{@link #getAudioLevel() <em>Audio Level</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAudioLevel()
   * @generated
   * @ordered
   */
  protected AudioLevel audioLevel;

  /**
   * The cached value of the '{@link #getSyncWith() <em>Sync With</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSyncWith()
   * @generated
   * @ordered
   */
  protected Clip syncWith;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ClipImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return VideoEditPackage.Literals.CLIP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, VideoEditPackage.CLIP__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getSource()
  {
    return source;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSource(String newSource)
  {
    String oldSource = source;
    source = newSource;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, VideoEditPackage.CLIP__SOURCE, oldSource, source));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TimeCode getSourceIn()
  {
    return sourceIn;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSourceIn(TimeCode newSourceIn, NotificationChain msgs)
  {
    TimeCode oldSourceIn = sourceIn;
    sourceIn = newSourceIn;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, VideoEditPackage.CLIP__SOURCE_IN, oldSourceIn, newSourceIn);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSourceIn(TimeCode newSourceIn)
  {
    if (newSourceIn != sourceIn)
    {
      NotificationChain msgs = null;
      if (sourceIn != null)
        msgs = ((InternalEObject)sourceIn).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - VideoEditPackage.CLIP__SOURCE_IN, null, msgs);
      if (newSourceIn != null)
        msgs = ((InternalEObject)newSourceIn).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - VideoEditPackage.CLIP__SOURCE_IN, null, msgs);
      msgs = basicSetSourceIn(newSourceIn, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, VideoEditPackage.CLIP__SOURCE_IN, newSourceIn, newSourceIn));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TimeCode getSourceOut()
  {
    return sourceOut;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSourceOut(TimeCode newSourceOut, NotificationChain msgs)
  {
    TimeCode oldSourceOut = sourceOut;
    sourceOut = newSourceOut;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, VideoEditPackage.CLIP__SOURCE_OUT, oldSourceOut, newSourceOut);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSourceOut(TimeCode newSourceOut)
  {
    if (newSourceOut != sourceOut)
    {
      NotificationChain msgs = null;
      if (sourceOut != null)
        msgs = ((InternalEObject)sourceOut).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - VideoEditPackage.CLIP__SOURCE_OUT, null, msgs);
      if (newSourceOut != null)
        msgs = ((InternalEObject)newSourceOut).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - VideoEditPackage.CLIP__SOURCE_OUT, null, msgs);
      msgs = basicSetSourceOut(newSourceOut, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, VideoEditPackage.CLIP__SOURCE_OUT, newSourceOut, newSourceOut));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TimeCode getTargetPosition()
  {
    return targetPosition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTargetPosition(TimeCode newTargetPosition, NotificationChain msgs)
  {
    TimeCode oldTargetPosition = targetPosition;
    targetPosition = newTargetPosition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, VideoEditPackage.CLIP__TARGET_POSITION, oldTargetPosition, newTargetPosition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTargetPosition(TimeCode newTargetPosition)
  {
    if (newTargetPosition != targetPosition)
    {
      NotificationChain msgs = null;
      if (targetPosition != null)
        msgs = ((InternalEObject)targetPosition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - VideoEditPackage.CLIP__TARGET_POSITION, null, msgs);
      if (newTargetPosition != null)
        msgs = ((InternalEObject)newTargetPosition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - VideoEditPackage.CLIP__TARGET_POSITION, null, msgs);
      msgs = basicSetTargetPosition(newTargetPosition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, VideoEditPackage.CLIP__TARGET_POSITION, newTargetPosition, newTargetPosition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AudioLevel getAudioLevel()
  {
    return audioLevel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAudioLevel(AudioLevel newAudioLevel, NotificationChain msgs)
  {
    AudioLevel oldAudioLevel = audioLevel;
    audioLevel = newAudioLevel;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, VideoEditPackage.CLIP__AUDIO_LEVEL, oldAudioLevel, newAudioLevel);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAudioLevel(AudioLevel newAudioLevel)
  {
    if (newAudioLevel != audioLevel)
    {
      NotificationChain msgs = null;
      if (audioLevel != null)
        msgs = ((InternalEObject)audioLevel).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - VideoEditPackage.CLIP__AUDIO_LEVEL, null, msgs);
      if (newAudioLevel != null)
        msgs = ((InternalEObject)newAudioLevel).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - VideoEditPackage.CLIP__AUDIO_LEVEL, null, msgs);
      msgs = basicSetAudioLevel(newAudioLevel, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, VideoEditPackage.CLIP__AUDIO_LEVEL, newAudioLevel, newAudioLevel));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Clip getSyncWith()
  {
    if (syncWith != null && syncWith.eIsProxy())
    {
      InternalEObject oldSyncWith = (InternalEObject)syncWith;
      syncWith = (Clip)eResolveProxy(oldSyncWith);
      if (syncWith != oldSyncWith)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, VideoEditPackage.CLIP__SYNC_WITH, oldSyncWith, syncWith));
      }
    }
    return syncWith;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Clip basicGetSyncWith()
  {
    return syncWith;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSyncWith(Clip newSyncWith)
  {
    Clip oldSyncWith = syncWith;
    syncWith = newSyncWith;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, VideoEditPackage.CLIP__SYNC_WITH, oldSyncWith, syncWith));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case VideoEditPackage.CLIP__SOURCE_IN:
        return basicSetSourceIn(null, msgs);
      case VideoEditPackage.CLIP__SOURCE_OUT:
        return basicSetSourceOut(null, msgs);
      case VideoEditPackage.CLIP__TARGET_POSITION:
        return basicSetTargetPosition(null, msgs);
      case VideoEditPackage.CLIP__AUDIO_LEVEL:
        return basicSetAudioLevel(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case VideoEditPackage.CLIP__NAME:
        return getName();
      case VideoEditPackage.CLIP__SOURCE:
        return getSource();
      case VideoEditPackage.CLIP__SOURCE_IN:
        return getSourceIn();
      case VideoEditPackage.CLIP__SOURCE_OUT:
        return getSourceOut();
      case VideoEditPackage.CLIP__TARGET_POSITION:
        return getTargetPosition();
      case VideoEditPackage.CLIP__AUDIO_LEVEL:
        return getAudioLevel();
      case VideoEditPackage.CLIP__SYNC_WITH:
        if (resolve) return getSyncWith();
        return basicGetSyncWith();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case VideoEditPackage.CLIP__NAME:
        setName((String)newValue);
        return;
      case VideoEditPackage.CLIP__SOURCE:
        setSource((String)newValue);
        return;
      case VideoEditPackage.CLIP__SOURCE_IN:
        setSourceIn((TimeCode)newValue);
        return;
      case VideoEditPackage.CLIP__SOURCE_OUT:
        setSourceOut((TimeCode)newValue);
        return;
      case VideoEditPackage.CLIP__TARGET_POSITION:
        setTargetPosition((TimeCode)newValue);
        return;
      case VideoEditPackage.CLIP__AUDIO_LEVEL:
        setAudioLevel((AudioLevel)newValue);
        return;
      case VideoEditPackage.CLIP__SYNC_WITH:
        setSyncWith((Clip)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case VideoEditPackage.CLIP__NAME:
        setName(NAME_EDEFAULT);
        return;
      case VideoEditPackage.CLIP__SOURCE:
        setSource(SOURCE_EDEFAULT);
        return;
      case VideoEditPackage.CLIP__SOURCE_IN:
        setSourceIn((TimeCode)null);
        return;
      case VideoEditPackage.CLIP__SOURCE_OUT:
        setSourceOut((TimeCode)null);
        return;
      case VideoEditPackage.CLIP__TARGET_POSITION:
        setTargetPosition((TimeCode)null);
        return;
      case VideoEditPackage.CLIP__AUDIO_LEVEL:
        setAudioLevel((AudioLevel)null);
        return;
      case VideoEditPackage.CLIP__SYNC_WITH:
        setSyncWith((Clip)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case VideoEditPackage.CLIP__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case VideoEditPackage.CLIP__SOURCE:
        return SOURCE_EDEFAULT == null ? source != null : !SOURCE_EDEFAULT.equals(source);
      case VideoEditPackage.CLIP__SOURCE_IN:
        return sourceIn != null;
      case VideoEditPackage.CLIP__SOURCE_OUT:
        return sourceOut != null;
      case VideoEditPackage.CLIP__TARGET_POSITION:
        return targetPosition != null;
      case VideoEditPackage.CLIP__AUDIO_LEVEL:
        return audioLevel != null;
      case VideoEditPackage.CLIP__SYNC_WITH:
        return syncWith != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", source: ");
    result.append(source);
    result.append(')');
    return result.toString();
  }

} //ClipImpl
