/*
 * generated by Xtext 2.33.0
 */
grammar InternalVideoEdit;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.videoedit.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.videoedit.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.videoedit.services.VideoEditGrammarAccess;

}

@parser::members {

 	private VideoEditGrammarAccess grammarAccess;

    public InternalVideoEditParser(TokenStream input, VideoEditGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Project";
   	}

   	@Override
   	protected VideoEditGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProject
entryRuleProject returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProjectRule()); }
	iv_ruleProject=ruleProject
	{ $current=$iv_ruleProject.current; }
	EOF;

// Rule Project
ruleProject returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='project'
		{
			newLeafNode(otherlv_0, grammarAccess.getProjectAccess().getProjectKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_STRING
				{
					newLeafNode(lv_name_1_0, grammarAccess.getProjectAccess().getNameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProjectRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getProjectAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProjectAccess().getTracksTrackParserRuleCall_3_0());
				}
				lv_tracks_3_0=ruleTrack
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProjectRule());
					}
					add(
						$current,
						"tracks",
						lv_tracks_3_0,
						"org.xtext.example.videoedit.VideoEdit.Track");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getProjectAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleTrack
entryRuleTrack returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTrackRule()); }
	iv_ruleTrack=ruleTrack
	{ $current=$iv_ruleTrack.current; }
	EOF;

// Rule Track
ruleTrack returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='track'
		{
			newLeafNode(otherlv_0, grammarAccess.getTrackAccess().getTrackKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTrackAccess().getTypeTrackTypeEnumRuleCall_1_0());
				}
				lv_type_1_0=ruleTrackType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTrackRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"org.xtext.example.videoedit.VideoEdit.TrackType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getTrackAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTrackRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getTrackAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTrackAccess().getClipsClipParserRuleCall_4_0());
				}
				lv_clips_4_0=ruleClip
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTrackRule());
					}
					add(
						$current,
						"clips",
						lv_clips_4_0,
						"org.xtext.example.videoedit.VideoEdit.Clip");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getTrackAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleClip
entryRuleClip returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClipRule()); }
	iv_ruleClip=ruleClip
	{ $current=$iv_ruleClip.current; }
	EOF;

// Rule Clip
ruleClip returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='clip'
		{
			newLeafNode(otherlv_0, grammarAccess.getClipAccess().getClipKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_STRING
				{
					newLeafNode(lv_name_1_0, grammarAccess.getClipAccess().getNameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getClipRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getClipAccess().getLeftCurlyBracketKeyword_2());
		}
		otherlv_3='source:'
		{
			newLeafNode(otherlv_3, grammarAccess.getClipAccess().getSourceKeyword_3());
		}
		(
			(
				lv_source_4_0=RULE_STRING
				{
					newLeafNode(lv_source_4_0, grammarAccess.getClipAccess().getSourceSTRINGTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getClipRule());
					}
					setWithLastConsumed(
						$current,
						"source",
						lv_source_4_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_5='source_in:'
		{
			newLeafNode(otherlv_5, grammarAccess.getClipAccess().getSource_inKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getClipAccess().getSourceInTimeCodeParserRuleCall_6_0());
				}
				lv_sourceIn_6_0=ruleTimeCode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClipRule());
					}
					set(
						$current,
						"sourceIn",
						lv_sourceIn_6_0,
						"org.xtext.example.videoedit.VideoEdit.TimeCode");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7='source_out:'
		{
			newLeafNode(otherlv_7, grammarAccess.getClipAccess().getSource_outKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getClipAccess().getSourceOutTimeCodeParserRuleCall_8_0());
				}
				lv_sourceOut_8_0=ruleTimeCode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClipRule());
					}
					set(
						$current,
						"sourceOut",
						lv_sourceOut_8_0,
						"org.xtext.example.videoedit.VideoEdit.TimeCode");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_9='target_position:'
		{
			newLeafNode(otherlv_9, grammarAccess.getClipAccess().getTarget_positionKeyword_9());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getClipAccess().getTargetPositionTimeCodeParserRuleCall_10_0());
				}
				lv_targetPosition_10_0=ruleTimeCode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClipRule());
					}
					set(
						$current,
						"targetPosition",
						lv_targetPosition_10_0,
						"org.xtext.example.videoedit.VideoEdit.TimeCode");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getClipAccess().getAudioLevelAudioLevelParserRuleCall_11_0());
				}
				lv_audioLevel_11_0=ruleAudioLevel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClipRule());
					}
					set(
						$current,
						"audioLevel",
						lv_audioLevel_11_0,
						"org.xtext.example.videoedit.VideoEdit.AudioLevel");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_12='sync_with:'
			{
				newLeafNode(otherlv_12, grammarAccess.getClipAccess().getSync_withKeyword_12_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getClipRule());
						}
					}
					otherlv_13=RULE_STRING
					{
						newLeafNode(otherlv_13, grammarAccess.getClipAccess().getSyncWithClipCrossReference_12_1_0());
					}
				)
			)
		)?
		otherlv_14='}'
		{
			newLeafNode(otherlv_14, grammarAccess.getClipAccess().getRightCurlyBracketKeyword_13());
		}
	)
;

// Entry rule entryRuleAudioLevel
entryRuleAudioLevel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAudioLevelRule()); }
	iv_ruleAudioLevel=ruleAudioLevel
	{ $current=$iv_ruleAudioLevel.current; }
	EOF;

// Rule AudioLevel
ruleAudioLevel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='audio_level:'
		{
			newLeafNode(otherlv_0, grammarAccess.getAudioLevelAccess().getAudio_levelKeyword_0());
		}
		(
			(
				lv_level_1_0=RULE_INT
				{
					newLeafNode(lv_level_1_0, grammarAccess.getAudioLevelAccess().getLevelINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAudioLevelRule());
					}
					setWithLastConsumed(
						$current,
						"level",
						lv_level_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_2='%'
		{
			newLeafNode(otherlv_2, grammarAccess.getAudioLevelAccess().getPercentSignKeyword_2());
		}
	)
;

// Entry rule entryRuleTimeCode
entryRuleTimeCode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTimeCodeRule()); }
	iv_ruleTimeCode=ruleTimeCode
	{ $current=$iv_ruleTimeCode.current; }
	EOF;

// Rule TimeCode
ruleTimeCode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_hours_0_0=RULE_INT
				{
					newLeafNode(lv_hours_0_0, grammarAccess.getTimeCodeAccess().getHoursINTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTimeCodeRule());
					}
					setWithLastConsumed(
						$current,
						"hours",
						lv_hours_0_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getTimeCodeAccess().getColonKeyword_1());
		}
		(
			(
				lv_minutes_2_0=RULE_INT
				{
					newLeafNode(lv_minutes_2_0, grammarAccess.getTimeCodeAccess().getMinutesINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTimeCodeRule());
					}
					setWithLastConsumed(
						$current,
						"minutes",
						lv_minutes_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getTimeCodeAccess().getColonKeyword_3());
		}
		(
			(
				lv_seconds_4_0=RULE_INT
				{
					newLeafNode(lv_seconds_4_0, grammarAccess.getTimeCodeAccess().getSecondsINTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTimeCodeRule());
					}
					setWithLastConsumed(
						$current,
						"seconds",
						lv_seconds_4_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_5=':'
		{
			newLeafNode(otherlv_5, grammarAccess.getTimeCodeAccess().getColonKeyword_5());
		}
		(
			(
				lv_frames_6_0=RULE_INT
				{
					newLeafNode(lv_frames_6_0, grammarAccess.getTimeCodeAccess().getFramesINTTerminalRuleCall_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTimeCodeRule());
					}
					setWithLastConsumed(
						$current,
						"frames",
						lv_frames_6_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Rule TrackType
ruleTrackType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='V1'
			{
				$current = grammarAccess.getTrackTypeAccess().getV1EnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getTrackTypeAccess().getV1EnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='V2'
			{
				$current = grammarAccess.getTrackTypeAccess().getV2EnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getTrackTypeAccess().getV2EnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='V3'
			{
				$current = grammarAccess.getTrackTypeAccess().getV3EnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getTrackTypeAccess().getV3EnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='A1'
			{
				$current = grammarAccess.getTrackTypeAccess().getA1EnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getTrackTypeAccess().getA1EnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='A2'
			{
				$current = grammarAccess.getTrackTypeAccess().getA2EnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getTrackTypeAccess().getA2EnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='A3'
			{
				$current = grammarAccess.getTrackTypeAccess().getA3EnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getTrackTypeAccess().getA3EnumLiteralDeclaration_5());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
